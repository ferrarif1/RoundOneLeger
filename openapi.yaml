openapi: 3.0.3
info:
  title: Ledger Backend API
  version: 1.0.0
servers:
  - url: http://localhost:8080
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LedgerEntry:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: string
        tags:
          type: array
          items:
            type: string
        links:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        order:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    LedgerListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LedgerEntry'
    LedgerReorderRequest:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: string
    LedgerImportRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: string
          format: byte
          description: Base64-encoded XLSX payload
    WorkspaceColumn:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        width:
          type: integer
    WorkspaceRow:
      type: object
      properties:
        id:
          type: string
        cells:
          type: object
          additionalProperties:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Workspace:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        kind:
          type: string
          enum:
            - sheet
            - document
            - folder
        parentId:
          type: string
          nullable: true
        columns:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceColumn'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceRow'
        document:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    WorkspaceListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceTreeItem'
    WorkspaceEnvelope:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
    WorkspaceTreeItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        kind:
          type: string
          enum:
            - sheet
            - document
            - folder
        parentId:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        children:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceTreeItem'
    WorkspaceRequest:
      type: object
      properties:
        name:
          type: string
        document:
          type: string
        columns:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceColumn'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceRow'
        kind:
          type: string
          enum:
            - sheet
            - document
            - folder
        parentId:
          type: string
          nullable: true
    WorkspaceUpdateRequest:
      type: object
      properties:
        name:
          type: string
        document:
          type: string
        columns:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceColumn'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceRow'
        parentId:
          type: string
          nullable: true
    WorkspaceTextImportRequest:
      type: object
      properties:
        text:
          type: string
        delimiter:
          type: string
        hasHeader:
          type: boolean
    AllowlistEntry:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        cidr:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    AllowlistRequest:
      type: object
      required:
        - label
        - cidr
      properties:
        label:
          type: string
        cidr:
          type: string
        description:
          type: string
    AllowlistListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AllowlistEntry'
    AuditEntry:
      type: object
      properties:
        id:
          type: string
        actor:
          type: string
        action:
          type: string
        details:
          type: string
        hash:
          type: string
        prev_hash:
          type: string
        created_at:
          type: string
          format: date-time
    AuditListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AuditEntry'
    Session:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
        client_id:
          type: string
        issued_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
    NonceResponse:
      type: object
      properties:
        nonce:
          type: string
        message:
          type: string
          description: Human-readable message that must be signed by the SDID wallet
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
    LoginRequest:
      type: object
      required:
        - nonce
        - response
      properties:
        nonce:
          type: string
        response:
          $ref: '#/components/schemas/SdidLoginResponse'
    SdidLoginResponse:
      type: object
      required:
        - identity
      properties:
        challenge:
          type: string
        signature:
          type: string
          description: Base64-encoded DER ECDSA signature returned by the SDID extension
        proof:
          $ref: '#/components/schemas/SdidProof'
        identity:
          $ref: '#/components/schemas/SdidIdentity'
        authentication:
          $ref: '#/components/schemas/SdidAuthentication'
        authorized:
          type: boolean
        remembered:
          type: boolean
    SdidProof:
      type: object
      properties:
        signatureValue:
          type: string
          description: Alternate location for the login signature
    SdidIdentity:
      type: object
      required:
        - did
        - publicKeyJwk
      properties:
        did:
          type: string
        label:
          type: string
        roles:
          type: array
          items:
            type: string
        publicKeyJwk:
          type: object
          additionalProperties: {}
          description: JSON Web Key describing an ECDSA P-256 public key
        authorized:
          type: boolean
    SdidAuthentication:
      type: object
      properties:
        canonicalRequest:
          type: string
        payload:
          type: object
          additionalProperties: {}
    HistoryStatus:
      type: object
      properties:
        undo:
          type: boolean
        redo:
          type: boolean
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                type: object
  /auth/request-nonce:
    post:
      summary: Request login nonce
      responses:
        '200':
          description: Nonce issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceResponse'
  /auth/login:
    post:
      summary: Authenticate via SDID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Session issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          description: Signature validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                signature_invalid:
                  value:
                    error: signature invalid
        '403':
          description: Identity lacks administrator approval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                not_approved:
                  value:
                    error: identity_not_approved
  /api/v1/ledgers/{type}:
    get:
      summary: List ledger entries
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
          enum: [ips, personnel, systems]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ledger list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerListResponse'
    post:
      summary: Create ledger entry
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
          enum: [ips, personnel, systems]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerEntry'
      responses:
        '200':
          description: Entry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerEntry'
  /api/v1/ledgers/{type}/{id}:
    put:
      summary: Update a ledger entry
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
          enum: [ips, personnel, systems]
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerEntry'
      responses:
        '200':
          description: Entry updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerEntry'
    delete:
      summary: Delete a ledger entry
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
          enum: [ips, personnel, systems]
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Entry deleted
  /api/v1/ledgers/{type}/reorder:
    post:
      summary: Reorder ledger entries
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
          enum: [ips, personnel, systems]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerReorderRequest'
      responses:
        '200':
          description: New ordering returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerListResponse'
  /api/v1/ledgers/{type}/import:
    post:
      summary: Import a single ledger from XLSX
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
          enum: [ips, personnel, systems]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerImportRequest'
      responses:
        '200':
          description: Ledger replaced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerListResponse'
  /api/v1/ledgers/export:
    get:
      summary: Export all ledgers to XLSX
      security:
        - bearerAuth: []
      responses:
        '200':
          description: XLSX workbook
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
  /api/v1/ledgers/import:
    post:
      summary: Import all ledgers from XLSX
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerImportRequest'
      responses:
        '200':
          description: Import accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /api/v1/ledger-cartesian:
    get:
      summary: Derived ledger matrix
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cartesian rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
  /api/v1/workspaces:
    get:
      summary: List collaborative workspaces
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Workspaces returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceListResponse'
    post:
      summary: Create collaborative workspace
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceRequest'
      responses:
        '201':
          description: Workspace created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceEnvelope'
  /api/v1/workspaces/{id}:
    get:
      summary: Retrieve workspace
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceEnvelope'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update workspace
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdateRequest'
      responses:
        '200':
          description: Workspace updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceEnvelope'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete workspace
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Workspace removed
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workspaces/{id}/import/excel:
    post:
      summary: Import workspace data from Excel
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Workspace updated from Excel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceEnvelope'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workspaces/{id}/import/text:
    post:
      summary: Import workspace data from pasted text
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceTextImportRequest'
      responses:
        '200':
          description: Workspace updated from text
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceEnvelope'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/workspaces/{id}/export:
    get:
      summary: Export workspace as Excel
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Workspace Excel workbook
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/ip-allowlist:
    get:
      summary: List allowlist entries
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Allowlist entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowlistListResponse'
    post:
      summary: Add allowlist entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllowlistRequest'
      responses:
        '200':
          description: Entry stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowlistEntry'
  /api/v1/ip-allowlist/{id}:
    put:
      summary: Update allowlist entry
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllowlistRequest'
      responses:
        '200':
          description: Entry updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowlistEntry'
    delete:
      summary: Delete allowlist entry
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Entry removed
  /api/v1/history/undo:
    post:
      summary: Undo previous mutation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Undo successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /api/v1/history/redo:
    post:
      summary: Redo next mutation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Redo successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /api/v1/history:
    get:
      summary: History availability
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Undo/redo availability
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryStatus'
  /api/v1/audit:
    get:
      summary: List audit logs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Audit log entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditListResponse'
  /api/v1/audit/verify:
    get:
      summary: Verify audit chain
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Chain verification result
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
